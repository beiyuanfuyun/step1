//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<string.h>  

//操作符
//1.算数操作符
//+-*/%取余
//int main()
//{
//	int a = 5 % 2;
//	printf("%d\n", a);
//	return 0;
//}
//2.移位操作符
//左移<<,向右>>
//移的是二进制位i
//int main()
//{
//	int a = 1;
//	//1占四个字节，位32个bite位
//	int b=a << 1;//一般是将数字扩大两倍//二进制序列向左移一位，
//	int c = b << 2;
//	printf("%d\n", b);
//	//右移基本就时除以2的倍数
//
//}
//3.按位
//&  按位与  和and好像   全1为1
//|  按位或   和or像似   有1则1
//^  按位异或     二进制位下相同为0，相异为1   有1则1，全1则0
//int main()
//{//按位&
//	int a = 3;
//	int b = 5;
//	int c = a & b;
//	printf("%d\n", c);
//	//3=011
//	//5=101
//	//a&b=001=1
//}
//int main()
//{
//	//按位或|
//	int a = 3;
//	int b = 5;
//	int c = a | b;
//	printf("%d\n", c);
//	return 0;//011//101//111=7
//}
//int main()
//{//^异或
//	int a = 3;
//	int b = 5;
//	int c = a ^ b;
//	printf("%d\n", c);//011//101//110=6
//}
//4.赋值操作符
//=赋值   ==判断相等
//a=a+10与a+=10相同
//a=a-1,a-=1,a&=2复合赋值符^=,|=,*=
//5.单目操作符
// ！逻辑反操作
//int main()
//{
//	//int a = 10;
//	//printf("%d\n", a);//在语言中除0以外的所有数全为真，0则为假
//	//printf("%d\n", !a);//则！将10这真数转换为假为0
//	//int b = 0;
//	//printf("%d\n", !b);
//	//int c = -10;
//	//int d = +3;//+一般省略这里为正值
//	6.//&取地址操作符，*间接访问操作符，6.sizeof操作数类型长度以字节为单位
//	int a = 10;
//	printf("%d\n", sizeof(a));//4
//	printf("%d\n", sizeof(int));//4
//	printf("%d\n", sizeof a);//4
//	//printf("%d\n", sizeof int);会报错
//	int arr[10] = { 0 };
//	printf("%d\n", sizeof(arr));
//	int  b = sizeof(arr) / sizeof(arr[0]);
//	printf("%d\n", b);
//	return 0;
//
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	7.//~对一个数的二进制按位进行取反,例如0000按位取反则为1111
//	int a = 0;//四个字节，32个bite位
//	int b = ~a;
//	//这里涉及到 原码 反码  以及补码的转换
//	//0=00000 00000 00000 00000 00000 00000 00
//	//  11111 11111 11111 11111 11111 11111 11
//	//负数在计算机中储存的时候，储存的为二进制的补码，翻译时为原码，而且最开头的数字代表着正负
// //正数则存储时都是也是补码也可以说是原码
// 只要是整数（包括正数与负数），内存中存储的都是二进制的补码
// 正数原码反码补码三码相同，所以正数在内存中都是补码也没有问题
// 负数
//原码： 直接按照正负也出来的序列
// 反码：原码的符号位不变，其位为按位取反得到的
// 补码：反码+1
// -2
// -2的原码10000 00000 00000 00000 00000 00000 10
// 反码为11111 11111 11111 11111 11111 11111 01
// 补码为11111 11111 11111 11111 11111 11111 10
//	//0开头正数，1开头为负数
//	//所以这里的11111 11111 11111 11111 11为补码
//	//公式为原码反着二进制得到反码，反码加1为补码
//	//所以这里逆推为反码 11111 11111 11111 11111 10
//	//再推为原码 10000 00000 00000 00000 01最前面的数字为正负符号不能变化，当然~符不管这个
//	printf("%d\n", b);
//}
//int main()
//{
//	8.//++符
//	int a = 10;
//	int num1 = 10;
//	//int b = a++;//后置++，先将a的值赋给b，再++
//	//int b = ++a;//前置++，先++，后使用a,b
//	/*printf("a=%d,b=%d\n", a, b);*/
//	int c = a--;
//	int d = --num1;
//	printf("a=%d,c=%d,d=%d,num1=%d\n", a, c, d,num1);
//}


//9.*间接访问操作符（解引用操作符）与&取地址为一对
//10.()强制类型转换操作符
//#include<stdio.h>
//int main()
//{
//	//int a = 3.14;
//	//printf("%d\n", a);//这里会丢失数据
//	int a = (int)3.14;//3.14原为doule类型的，这里转换为int类型
//	printf("%d\n", a);
//	return 0;
//}




//
//}

//6.双目操作符
//int main()
//{
//	int a = 1;
//	int b = 2;
//	int c = a + b;//+号为双目操作符，两个操作数
//}
//7.三目操作符
//int main()
//{   //条件操作符exp1?exp2:exp3  //exp代表表达式//三目操作符
//	int a = 10;
//	int b = 20;
//	int max = 0;
//
//	max(a > b ? a : b);//如果a>b则将a赋给max,如果a<b则将b赋给max//这里有错误记得回来改
//	/*if (a > b)
//		max = a;
//	else
//		max = b;*/
//	return 0;
//}
 

//8.逗号表达式
//exp1,exp2,exp3,...expn


//9.下标操作符
// 2.()函数调用操作符
//int Add(int x,int y)
//{
//	int z = 0;
//	z = x + y;
//	return  z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);//2.()函数调用操作符
//	return 0;





	//1.//[]下表引用操作符
	// int arr[10] = { 0 };
	//arr[4];
	//return 0;
//}

////数组--一组相同类型的数据
//int main()
//{
//	int arr[10]={1,2,3,4,5,6,7,8,9,10};//定义一个存放是十个整数的数组
//									   //下表从0开始，所以存放10个数最后一个数下标为9
//	//printf("%d\n", arr[9]);//用下标形式访问元素//数组的[]里的数必须为常量，
// 而且可以这样写int arr[]={1,2,3,4,5,6,7,8,9,0};
// 以及这样写char ch[10]="hello bit"这里正好可以插入是十个字符加上空格以及后面省略的\0
// \0这个算一个字符，但\0不算字符长度，例如问题c:\test\121的字符长度
// 虽然后面有个\0但仍然不算字符长度
//	/*char ch[20];
//	float arr2[4];
//	return 0;*/
//	int a = 0;
//	while (a < 10)
//	{
//		printf("%d\n", arr[a]);
//		a += 1;//也可以这样写a++这里应该默认为1
//		
//	}
//return 0;
//}
////函数
//	//1.自定义函数
//int Add(int x, int y)
//
//{
//	
//	int z = x + y;
//	return z;
//
//}
//int main()
//{
//	int sum = 0;
//	int num1 = 10;
//	int num2 = 20;
//	int a = 100;
//	int b = 200;
//	//sum = num1 + num2;
//	sum = Add(num1, num2);
//	//sum=a+b;
//	sum = Add(a, b);
//	/*sum = Add(2, 3);*/
//	printf("sum=%d\n", sum);
//	return 0;
//
//
//}
//{
//	//while循环
//	int line = 0;
//	printf("加入比特\n");
//	while (line < 20)//这里没有;
//	{
//		printf("敲一行代码%d\n",line);
//		line ++;
//	}
//	printf("好offer\n");
//	return 0;
//}
//{
//	//1.while循环
//	//2.for循环
//	//3.do...while循环
//	/*int input = 0;
//	printf("加入比特\n");
//	printf("你要好好学习？(1/0):");
//
//	scanf("%d", &input);
//	if (input == 1)
//	      printf("好offer\n");
//	else
//		  printf("卖红薯\n");*/
//	return 0;
//}
//注释
//c语言的早期这样     /*  中间都没了  */但这样存在一定的问题，如\*\**\*\前三个成为一体将中间的
// 而最后一个*\就成为了问题
// c++的风格\\c语言也采用了这种办法
// 
//
//	//转义字符
//	// 
//	// 9.\xdd为一个字符且为十六进制的数字
//	//printf("%c\n", '\x61');
//	
//	//\x61=1*16^0+6*16^1=97为a
//	//8.\ddd为一个字符且为八进制下的数字需翻译为十进制的数字再去找字符表
//	//printf("%d\n", strlen("c:\test\32\test.c"));//这里为13个字符，\t与\32都算一个字符
//	////   /32=2*8^0+3*8^1=26,对应ASCII表，且八进制中不能出现8
//	//printf(" \32");
//	// 7。\b退格符,\f进纸符，\r回车，\t水平制表，\v垂直制表
//	// 6.\a警告字符，蜂鸣
//	// 5.\'
//	//printf("%c\n", '\'');
//	//printf("%c\n", "\"");
//	//// 4."//"防止被转义的一个反转义符号
//	////3.\?连续书写多个问号时使用，防止被解析为三字母词
//	//printf("(are you ok??)\n");//这里在老版里？？）会形成一个三字母词转变位],
//	////这个时候就可以打成\?\?
//	////2.\t水平制表符，说简单就是占格，占了六个格子的大小
//	//printf("12\t34567\n");//如果想要不被翻译为转义字符的，就在加上一个/
//	////1.\n换行
//	//printf("abc\n");
//	return 0;
//}
//int float
//char
//字符串类型
//双引号引起的一串字符叫字符串
// 
//#include<string.h>//这里要加上头文件
//int main()
//{
//	char arr1[] = "abc";
//	char arr2[] = { 'a','b','c' };
//	printf("%d\n", strlen(arr1));//3//strlen-string-length-计算字符串长度//\0并没有算入到内
//	printf("%d\n", strlen(arr2));//42//这里因为没有结束符\0，
//	//所以就随机数列在第42位出现0停止，为随机值,所以可以在第二数列后面加上0
//	
//	//char arr1[]="abc";//数组//以字符串的形式输入时会自动补零，
//	////字符串里面有'a''b''c'''再加上最后的'\0'---'\0'为字符串的结束标志
//	////但在下面的字符类型中就不行，必须手动加入0,如果没有这个\0，没有结束标志，就随机打印
//	////所以放0或者\0,会隐藏在字符串的末尾，但字符类就要手动加入
//	//char arr2[] = { 'a','b','c',0};//由''引起的a为字符a,""引起的为字符串
//	////{}用来初始化数据
//	////且每一个字符都有相关的数字，'a'-97,'A'-65叫ASCII编码，字符对于的码值，有专门的ASCII表
//	////解释了'\0'为0编码值
//	//printf("%s\n", arr1);//注意这里为s而非d,%c字符，%s字符串
//	//printf("%s\n", arr2);
//	return 0;
	//"abcdef";
	//"helloworld";
	//	"";//空字符串
		//return 0;
//}